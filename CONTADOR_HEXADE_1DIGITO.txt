//CONTADOR DIGITAL DE NÚMEROS HEXADECIMAIS DE 1 DÍGITO

// Define os pinos para os segmentos do display de sete segmentos
const int segmentos[7] = {21, 22, 15, 2, 4, 16, 17}; // D21(R1), D22(R2), D15(R5), D2(R4), D4(R7), D16(R4), D17(R3)

// Números hexadecimais para exibir em cada segmento do display
const byte numeros[16] = {
  B0000001, // 0
  B1001111, // 1
  B0010010, // 2
  B0000110, // 3
  B1001100, // 4
  B0100100, // 5
  B0100000, // 6
  B0001111, // 7
  B0000000, // 8
  B0000100, // 9
  B0001000, // A
  B1100000, // B
  B0110001, // C
  B1000010, // D
  B0110000, // E
  B0111000  // F
};

void setup() {
  // Configura os pinos do display como saídas
  for (int i = 0; i < 7; i++) {
    pinMode(segmentos[i], OUTPUT);
  }
}

void loop() {
  // Exibe os números hexadecimais de 0 a F
  for (int i = 0; i < 16; i++) {
    exibirNumeroHexadecimal(i); // Exibe o número hexadecimal atual
    delay(700); // Aguarda 700 milissegundos (0.7 segundos) entre cada número
  }
}

// Função para exibir um número hexadecimal no display de sete segmentos
void exibirNumeroHexadecimal(int numero) {
  if (numero >= 0 && numero <= 15) { // Verifica se o número está dentro do intervalo de 0 a F
    byte padrao = numeros[numero]; // Obtém o padrão de segmentos para o número dado
    // Define o estado dos segmentos do display de acordo com o padrão
    for (int i = 0; i < 7; i++) {
      digitalWrite(segmentos[i], bitRead(padrao, i));
    }
  }
}
